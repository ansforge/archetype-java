<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>${parentGroupId}</groupId>
    <artifactId>${parentArtifactId}</artifactId>
    <version>${parentVersion}</version>
    <relativePath />
  </parent>
  <groupId>${groupId}</groupId>
  <artifactId>${artifactId}</artifactId>
  <version>${version}</version>
  <packaging>jar</packaging>
  <name>ASIP miniservice</name>
  <inceptionYear>2019</inceptionYear>
  <properties>
    <license-maven-plugin-file>${project.baseUri}/src/license/asip/header.txt</license-maven-plugin-file>
    <spotbugs.excludeFilterFile>${project.build.directory}/quality/spotbugs-exclusions.xml</spotbugs.excludeFilterFile>
	<maven-license-plugin-file>${project.baseUri}/src/license/asip/header.txt</maven-license-plugin-file>
  </properties>
  <dependencies>
    <!-- JSON -->
    <dependency>
        <groupId>fr.ans</groupId>
        <artifactId>bom-ms</artifactId>
        <version>${parentVersion}</version>
        <classifier>resources</classifier>
        <type>zip</type>
        <scope>provided</scope>
      </dependency>

	<dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-afterburner</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
    </dependency>
    <!--<dependency>
      <groupId>com.github.dilbertside</groupId>
      <artifactId>commons-dbs</artifactId>
    </dependency>-->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
    </dependency>
    <!--<dependency>
      <groupId>fr.gipcps</groupId>
      <artifactId>sm-ws-bindings</artifactId>
    </dependency>-->
    <!-- @Inject -->
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
    </dependency>
    <!-- Servlet -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
    </dependency>
    <!-- Utilities -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-features-logging</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-frontend-jaxws</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-transports-http</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- Avoid: javax.validation.ValidationException: HV000183: Unable to load 'javax.el.ExpressionFactory' -->
      <groupId>org.glassfish</groupId>
      <artifactId>javax.el</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Persistence -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <!-- Avoid issue #72 Could not initialize class org.thymeleaf.templateresolver.ServletContextTemplateResolver 
				due to 'validation is not supported' -->
      <exclusions>
        <exclusion>
          <artifactId>pull-parser</artifactId>
          <groupId>pull-parser</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-hikaricp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-java8</artifactId>
    </dependency>
    <!-- Validation -->
    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
    </dependency>
    <!-- Test -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.objenesis</groupId>
      <artifactId>objenesis</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
    </dependency>
    <!-- Logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <!-- Spring -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aspects</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-orm</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-oxm</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
    </dependency>
    <!-- Spring Data -->
    <dependency>
      <groupId>org.springframework.data</groupId>
      <artifactId>spring-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.integration</groupId>
      <artifactId>spring-integration-rmi</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.ws</groupId>
      <artifactId>spring-ws-test</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>commons-logging</artifactId>
          <groupId>commons-logging</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.zalando</groupId>
      <artifactId>problem-spring-web</artifactId>
    </dependency>
  </dependencies>
  <build>
    <defaultGoal>clean sortpom:sort test package help:active-profiles</defaultGoal>
    <finalName>${project.artifactId}</finalName>
    <plugins>
	<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>unpack-shared-resources</id>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <phase>validate</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/quality</outputDirectory>
              <includeArtifactIds>${parentArtifactId}</includeArtifactIds>
              <includeGroupIds>${parentGroupId}</includeGroupIds>
              <excludeTransitive>true</excludeTransitive>
              <!--use as much as needed to be specific...also scope,type,classifier etc-->
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.github.ekryd.sortpom</groupId>
        <artifactId>sortpom-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>${maven-license-plugin.version}</version>
                     <configuration>
                    <header>licence-header.txt</header>
                    <includes>
                        <include>**/*.java</include>
                        <include>**/*.properties</include>
                    </includes>
                    <strictCheck>true</strictCheck>
                </configuration>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-classworlds</artifactId>
            <version>2.6.0</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <goals>
              <goal>format</goal>
            </goals>
            <phase>compile</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
		<executions>
          <execution>
            <id>validate</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>process-sources</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <configuration>
          <path>/</path>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>prod</id>
      <properties>
        <profile.build>prod</profile.build>
        <spring.profiles.active>prod</spring.profiles.active>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>staging</id>
      <properties>
        <profile.build>uat</profile.build>
        <spring.profiles.active>staging</spring.profiles.active>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>dev</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <!-- to run locally use docker: docker run - -name maildev -p 1080:80 
					-d -p 1025:25 djfarrelly/maildev -->
        <mail.smtp.host>localhost</mail.smtp.host>
        <mail.smtp.password />
        <mail.smtp.port>1025</mail.smtp.port>
        <profile.build>dev</profile.build>
        <spring.profiles.active>dev</spring.profiles.active>
      </properties>
    </profile>
    <profile>
      <id>h2</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <dataSource.driverClassName>org.h2.Driver</dataSource.driverClassName>
        <dataSource.password />
        <dataSource.url>jdbc:h2:mem:${artifactId};MODE=PostgreSQL</dataSource.url>
        <dataSource.username>sa</dataSource.username>
        <hibernate.create_database_schemas>true</hibernate.create_database_schemas>
        <hibernate.create_namespaces>true</hibernate.create_namespaces>
        <hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect>
        <hibernate.format_sql>false</hibernate.format_sql>
        <hibernate.hbm2ddl.auto>create-only</hibernate.hbm2ddl.auto>
        <hibernate.show_sql>false</hibernate.show_sql>
        <hibernate.use_sql_comments>false</hibernate.use_sql_comments>
      </properties>
      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>hsql</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <dataSource.driverClassName>org.hsqldb.jdbcDriver</dataSource.driverClassName>
        <dataSource.password />
        <dataSource.url>jdbc:hsqldb:mem:${artifactId}</dataSource.url>
        <dataSource.username>sa</dataSource.username>
        <hibernate.create_database_schemas>false</hibernate.create_database_schemas>
        <hibernate.create_namespaces>false</hibernate.create_namespaces>
        <hibernate.dialect>org.hibernate.dialect.HSQLDialect</hibernate.dialect>
        <hibernate.format_sql>false</hibernate.format_sql>
        <hibernate.hbm2ddl.auto>create</hibernate.hbm2ddl.auto>
        <hibernate.show_sql>false</hibernate.show_sql>
        <hibernate.use_sql_comments>false</hibernate.use_sql_comments>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.hsqldb</groupId>
          <artifactId>hsqldb</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>pgsql</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <dataSource.driverClassName>org.postgresql.Driver</dataSource.driverClassName>
        <dataSource.password>${artifactId}</dataSource.password>
        <dataSource.url>jdbc:postgresql://localhost:5432/${artifactId}</dataSource.url>
        <dataSource.username>${artifactId}</dataSource.username>
        <hibernate.create_database_schemas>false</hibernate.create_database_schemas>
        <hibernate.create_namespaces>false</hibernate.create_namespaces>
        <hibernate.dialect>org.hibernate.dialect.PostgreSQL9Dialect</hibernate.dialect>
        <hibernate.format_sql>false</hibernate.format_sql>
        <hibernate.hbm2ddl.auto>create</hibernate.hbm2ddl.auto>
        <hibernate.show_sql>false</hibernate.show_sql>
        <hibernate.use_sql_comments>false</hibernate.use_sql_comments>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>oracle</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <dataSource.driverClassName>oracle.jdbc.OracleDriver</dataSource.driverClassName>
        <dataSource.password>TBD</dataSource.password>
        <dataSource.url>TBD</dataSource.url>
        <dataSource.username>TBD</dataSource.username>
        <hibernate.create_database_schemas>false</hibernate.create_database_schemas>
        <hibernate.create_namespaces>false</hibernate.create_namespaces>
        <hibernate.dialect>org.hibernate.dialect.Oracle12cDialect</hibernate.dialect>
        <hibernate.format_sql>false</hibernate.format_sql>
        <hibernate.hbm2ddl.auto>none</hibernate.hbm2ddl.auto>
        <hibernate.show_sql>false</hibernate.show_sql>
        <hibernate.use_sql_comments>false</hibernate.use_sql_comments>
      </properties>
      <dependencies>
        <dependency>
          <groupId>com.oracle</groupId>
          <artifactId>ojdbc7</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>tomcat7</id>
      <dependencies>
        <dependency>
          <groupId>javax.el</groupId>
          <artifactId>javax.el-api</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>mysql</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <dataSource.driverClassName>com.mysql.jdbc.Driver</dataSource.driverClassName>
        <dataSource.password>${artifactId}</dataSource.password>
        <dataSource.url><![CDATA[jdbc:mysql://localhost:3306/${artifactId}?createDatabaseIfNotExist=true&amp;autoReconnect=true]]></dataSource.url>
        <dataSource.username>${artifactId}</dataSource.username>
        <hibernate.create_database_schemas>false</hibernate.create_database_schemas>
        <hibernate.create_namespaces>false</hibernate.create_namespaces>
        <hibernate.dialect>org.hibernate.dialect.MySQL5InnoDBDialect</hibernate.dialect>
        <hibernate.format_sql>false</hibernate.format_sql>
        <hibernate.hbm2ddl.auto>create</hibernate.hbm2ddl.auto>
        <hibernate.show_sql>false</hibernate.show_sql>
        <hibernate.use_sql_comments>false</hibernate.use_sql_comments>
      </properties>
      <dependencies>
        <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>dockerfile-maven-plugin</artifactId>
            <version>${dockerfile-maven-plugin.version}</version>
          </plugin>
        </plugins>
      </build>
      <properties>
        <maven.test.skip>true</maven.test.skip>
      </properties>
    </profile>
    <profile>
      <id>jib</id>
      <build>
        <plugins>
          <plugin>
            <!-- https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#quickstart -->
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${jib-maven-plugin.version}</version>
            <executions>
              <execution>
                <phase>install</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <to>
                <image>${project.artifactId}:${project.version}-${profile.build}</image>
              </to>
              <container>
                <!-- <ports> <port>${server.port}</port> </ports> -->
                <environment>
                  <JAVA_TOOL_OPTIONS>-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx512m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap</JAVA_TOOL_OPTIONS>
                  <TZ>${docker.image.tz}</TZ>
                </environment>
                <useCurrentTimestamp>true</useCurrentTimestamp>
              </container>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <properties>
        <maven.test.skip>true</maven.test.skip>
      </properties>
    </profile>
    <profile>
      <id>coverage</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>cobertura-maven-plugin</artifactId>
            <version>${cobertura-maven-plugin.version}</version>
            <configuration>
              <format>xml</format>
              <maxmem>256m</maxmem>
              <!-- aggregated reports for multi-module projects -->
              <aggregate>true</aggregate>
              <check />
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.eluder.coveralls</groupId>
            <artifactId>coveralls-maven-plugin</artifactId>
            <version>${coveralls-maven-plugin.version}</version>
          </plugin>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>prepare-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <excludes>
                <exclude>**/dto/*</exclude>
                <exclude>**/entity/*</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
